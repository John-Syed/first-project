AWSTemplateFormatVersion: 2010-09-09
Description: Creates new VPC with all subnets and EC1 Instance
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Lable:
          Default: NetworkConfigurations
          Parameters:
            - VPCID
            - SubnetId
            - SecurityGroupID
        Lable1:
          Default: Ec2 Configuaration
          Parameters:
            - InstanceType
            - KeyName
    Parameterlables:
      VPCID:
        Default: Enter CIDR of VPC
      SubnetId:
        Default: Enter CIDR of Subnet
      SecurityGroupID:
        Default: Enter subnet ID
Parameters:
  VPCID:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: Parent CIDRBLock
    Type: String
  PublicSubnetCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: Publicsubnet decleration
    Default: 10.0.1.0/24
    Description:  subnet decleration
    Type: String
    
  PrivateSubnetCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: Privatesubnet decleration
    Default: 10.0.2.0/24
    Description: Subnet decleration
    Type: String
Resources:
  MyVpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      CidrBlock: !Ref VPCID
      Tags:
        - Key: Name
          Value: syed
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: !Ref PublicSubnetCIDR
      AvailabilityZone: "us-east-1a"
      Tags:
        - Key: Name
          Value: MyPublicSubnet
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: "us-east-1b"
      Tags:
        - Key: Name
          Value: MyPrivateSubnet
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: IGW
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: PublicRouteTable
  RouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: PrivateRouteTable
  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVpc
      InternetGatewayId: !Ref InternetGateway
  subnetRouteTableAssosiation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet
  subnetRouteTableAssosiation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTable2
      SubnetId: !Ref PrivateSubnet
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http to client Host
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: jpSG
  MyEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-05fa00d4c63e32376
      KeyName: jpj
      InstanceType: t2.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeleteOnTermination: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: MyEC2Instance
  MyDBSERVER:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-05fa00d4c63e32376
      KeyName: jpj
      InstanceType: t2.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeleteOnTermination: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref PrivateSubnet
      Tags:
        - Key: Name
          Value: MyDBSERVER
  NATGateway:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
      - Key: stack
        Value: production
  NATGatewayEIP:
   Type: AWS::EC2::EIP
   Properties:
      Domain: vpc
  RouteNATGateway:
   DependsOn: NATGateway
   Type: AWS::EC2::Route
   Properties:
      RouteTableId: !Ref RouteTable2
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway
